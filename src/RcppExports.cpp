// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// b_theta
double b_theta(const arma::vec& s_k, const arma::vec& f_k, double theta_i);
RcppExport SEXP _DPGLM_b_theta(SEXP s_kSEXP, SEXP f_kSEXP, SEXP theta_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type s_k(s_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f_k(f_kSEXP);
    Rcpp::traits::input_parameter< double >::type theta_i(theta_iSEXP);
    rcpp_result_gen = Rcpp::wrap(b_theta(s_k, f_k, theta_i));
    return rcpp_result_gen;
END_RCPP
}
// b_prime_theta
double b_prime_theta(const arma::vec& s_k, const arma::vec& f_k, double theta_i);
RcppExport SEXP _DPGLM_b_prime_theta(SEXP s_kSEXP, SEXP f_kSEXP, SEXP theta_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type s_k(s_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f_k(f_kSEXP);
    Rcpp::traits::input_parameter< double >::type theta_i(theta_iSEXP);
    rcpp_result_gen = Rcpp::wrap(b_prime_theta(s_k, f_k, theta_i));
    return rcpp_result_gen;
END_RCPP
}
// L_theta
double L_theta(const arma::vec& s_k, const arma::vec& f_k, double theta_i, double c_0, double y);
RcppExport SEXP _DPGLM_L_theta(SEXP s_kSEXP, SEXP f_kSEXP, SEXP theta_iSEXP, SEXP c_0SEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type s_k(s_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f_k(f_kSEXP);
    Rcpp::traits::input_parameter< double >::type theta_i(theta_iSEXP);
    Rcpp::traits::input_parameter< double >::type c_0(c_0SEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(L_theta(s_k, f_k, theta_i, c_0, y));
    return rcpp_result_gen;
END_RCPP
}
// llik_beta
double llik_beta(const arma::vec& y, const arma::mat& x, const arma::vec& theta, const arma::mat& crm, double c_0, int B, double sigma_theta);
RcppExport SEXP _DPGLM_llik_beta(SEXP ySEXP, SEXP xSEXP, SEXP thetaSEXP, SEXP crmSEXP, SEXP c_0SEXP, SEXP BSEXP, SEXP sigma_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type crm(crmSEXP);
    Rcpp::traits::input_parameter< double >::type c_0(c_0SEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_theta(sigma_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(llik_beta(y, x, theta, crm, c_0, B, sigma_theta));
    return rcpp_result_gen;
END_RCPP
}
// stick_breaking_init
arma::vec stick_breaking_init(int K, double alpha);
RcppExport SEXP _DPGLM_stick_breaking_init(SEXP KSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(stick_breaking_init(K, alpha));
    return rcpp_result_gen;
END_RCPP
}
// stick_breaking_update
arma::vec stick_breaking_update(int K, double alpha, arma::uvec z);
RcppExport SEXP _DPGLM_stick_breaking_update(SEXP KSEXP, SEXP alphaSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(stick_breaking_update(K, alpha, z));
    return rcpp_result_gen;
END_RCPP
}
// sample_cluster_assignments
arma::vec sample_cluster_assignments(arma::vec data, arma::vec pi, arma::vec mu, arma::vec sigma2);
RcppExport SEXP _DPGLM_sample_cluster_assignments(SEXP dataSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_cluster_assignments(data, pi, mu, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sample_cluster_parameters
Rcpp::List sample_cluster_parameters(arma::vec data, arma::uvec z, arma::vec sigma2, arma::vec mu, int K, double mu0, double sigma02, double a_sigma, double b_sigma);
RcppExport SEXP _DPGLM_sample_cluster_parameters(SEXP dataSEXP, SEXP zSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP KSEXP, SEXP mu0SEXP, SEXP sigma02SEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma02(sigma02SEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_cluster_parameters(data, z, sigma2, mu, K, mu0, sigma02, a_sigma, b_sigma));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha
double update_alpha(double alpha, int n, int K, double a, double b);
RcppExport SEXP _DPGLM_update_alpha(SEXP alphaSEXP, SEXP nSEXP, SEXP KSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha(alpha, n, K, a, b));
    return rcpp_result_gen;
END_RCPP
}
// update_mu0
double update_mu0(arma::vec mu, double sigma02);
RcppExport SEXP _DPGLM_update_mu0(SEXP muSEXP, SEXP sigma02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma02(sigma02SEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu0(mu, sigma02));
    return rcpp_result_gen;
END_RCPP
}
// update_sigma02
double update_sigma02(const arma::vec& mu, double mu0, double a0, double b0);
RcppExport SEXP _DPGLM_update_sigma02(SEXP muSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma02(mu, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// slice_sampler_a_sigma
double slice_sampler_a_sigma(double a_sigma, double shape, double rate, const arma::vec& sigma2, double b_sigma, double w, int m);
RcppExport SEXP _DPGLM_slice_sampler_a_sigma(SEXP a_sigmaSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP sigma2SEXP, SEXP b_sigmaSEXP, SEXP wSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_sampler_a_sigma(a_sigma, shape, rate, sigma2, b_sigma, w, m));
    return rcpp_result_gen;
END_RCPP
}
// update_b_sigma
double update_b_sigma(double d0, double e0, arma::vec sigma2, double a_sigma);
RcppExport SEXP _DPGLM_update_b_sigma(SEXP d0SEXP, SEXP e0SEXP, SEXP sigma2SEXP, SEXP a_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type e0(e0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_b_sigma(d0, e0, sigma2, a_sigma));
    return rcpp_result_gen;
END_RCPP
}
// dirichlet_process_mixture_sampler
Rcpp::List dirichlet_process_mixture_sampler(arma::vec data, int n_iter, double alpha, double mu0, double sigma02, double a, double b, double a0, double b0, double c0, double d0, double e0, double f0, int max_clusters);
RcppExport SEXP _DPGLM_dirichlet_process_mixture_sampler(SEXP dataSEXP, SEXP n_iterSEXP, SEXP alphaSEXP, SEXP mu0SEXP, SEXP sigma02SEXP, SEXP aSEXP, SEXP bSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP c0SEXP, SEXP d0SEXP, SEXP e0SEXP, SEXP f0SEXP, SEXP max_clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma02(sigma02SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type e0(e0SEXP);
    Rcpp::traits::input_parameter< double >::type f0(f0SEXP);
    Rcpp::traits::input_parameter< int >::type max_clusters(max_clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(dirichlet_process_mixture_sampler(data, n_iter, alpha, mu0, sigma02, a, b, a0, b0, c0, d0, e0, f0, max_clusters));
    return rcpp_result_gen;
END_RCPP
}
// logpdf_unif
double logpdf_unif(double x, double lower, double upper);
RcppExport SEXP _DPGLM_logpdf_unif(SEXP xSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(logpdf_unif(x, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
arma::vec rmvnorm(const arma::vec& mean, const arma::mat& Precision);
RcppExport SEXP _DPGLM_rmvnorm(SEXP meanSEXP, SEXP PrecisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Precision(PrecisionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(mean, Precision));
    return rcpp_result_gen;
END_RCPP
}
// rcategorical
int rcategorical(const arma::vec& probs);
RcppExport SEXP _DPGLM_rcategorical(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcategorical(probs));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(const int& R, const arma::vec& mu, const arma::mat& sigma);
RcppExport SEXP _DPGLM_mvrnormArma(SEXP RSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(R, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// log_posterior_u
double log_posterior_u(const arma::vec& u, const arma::vec& z, const arma::vec& theta, const double& alpha);
RcppExport SEXP _DPGLM_log_posterior_u(SEXP uSEXP, SEXP zSEXP, SEXP thetaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_posterior_u(u, z, theta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// u_sampler
arma::vec u_sampler(const arma::vec& u_old, const arma::vec& z, const arma::vec& theta, const double& alpha, const double& delta);
RcppExport SEXP _DPGLM_u_sampler(SEXP u_oldSEXP, SEXP zSEXP, SEXP thetaSEXP, SEXP alphaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u_old(u_oldSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(u_sampler(u_old, z, theta, alpha, delta));
    return rcpp_result_gen;
END_RCPP
}
// parallelVectorSum
double parallelVectorSum(NumericVector x);
RcppExport SEXP _DPGLM_parallelVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}
// z_sampler
arma::vec z_sampler(const arma::vec& y, const double& c0, const arma::vec& theta, const arma::mat& crm_mat);
RcppExport SEXP _DPGLM_z_sampler(SEXP ySEXP, SEXP c0SEXP, SEXP thetaSEXP, SEXP crm_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type crm_mat(crm_matSEXP);
    rcpp_result_gen = Rcpp::wrap(z_sampler(y, c0, theta, crm_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DPGLM_b_theta", (DL_FUNC) &_DPGLM_b_theta, 3},
    {"_DPGLM_b_prime_theta", (DL_FUNC) &_DPGLM_b_prime_theta, 3},
    {"_DPGLM_L_theta", (DL_FUNC) &_DPGLM_L_theta, 5},
    {"_DPGLM_llik_beta", (DL_FUNC) &_DPGLM_llik_beta, 7},
    {"_DPGLM_stick_breaking_init", (DL_FUNC) &_DPGLM_stick_breaking_init, 2},
    {"_DPGLM_stick_breaking_update", (DL_FUNC) &_DPGLM_stick_breaking_update, 3},
    {"_DPGLM_sample_cluster_assignments", (DL_FUNC) &_DPGLM_sample_cluster_assignments, 4},
    {"_DPGLM_sample_cluster_parameters", (DL_FUNC) &_DPGLM_sample_cluster_parameters, 9},
    {"_DPGLM_update_alpha", (DL_FUNC) &_DPGLM_update_alpha, 5},
    {"_DPGLM_update_mu0", (DL_FUNC) &_DPGLM_update_mu0, 2},
    {"_DPGLM_update_sigma02", (DL_FUNC) &_DPGLM_update_sigma02, 4},
    {"_DPGLM_slice_sampler_a_sigma", (DL_FUNC) &_DPGLM_slice_sampler_a_sigma, 7},
    {"_DPGLM_update_b_sigma", (DL_FUNC) &_DPGLM_update_b_sigma, 4},
    {"_DPGLM_dirichlet_process_mixture_sampler", (DL_FUNC) &_DPGLM_dirichlet_process_mixture_sampler, 14},
    {"_DPGLM_logpdf_unif", (DL_FUNC) &_DPGLM_logpdf_unif, 3},
    {"_DPGLM_rmvnorm", (DL_FUNC) &_DPGLM_rmvnorm, 2},
    {"_DPGLM_rcategorical", (DL_FUNC) &_DPGLM_rcategorical, 1},
    {"_DPGLM_mvrnormArma", (DL_FUNC) &_DPGLM_mvrnormArma, 3},
    {"_DPGLM_log_posterior_u", (DL_FUNC) &_DPGLM_log_posterior_u, 4},
    {"_DPGLM_u_sampler", (DL_FUNC) &_DPGLM_u_sampler, 5},
    {"_DPGLM_parallelVectorSum", (DL_FUNC) &_DPGLM_parallelVectorSum, 1},
    {"_DPGLM_z_sampler", (DL_FUNC) &_DPGLM_z_sampler, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_DPGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
